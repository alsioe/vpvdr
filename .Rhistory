ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping),
alpha = 0.2) +
# geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw()
# Second ggplot, using instead geom_ribbon() for the 50% HDI
# (much better)
df_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping),
alpha = 0.2) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw()
# Let's plot that out in ggplot, using geom_ribbon() to visualise the 50% HDI
df_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping),
alpha = 0.2) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw()
# Let's plot that out in ggplot, using geom_ribbon() to visualise the 50% HDI
df_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping),
alpha = 0.2) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_fill_brewer(palette = 'Dark2')
# Let's plot that out in ggplot, using geom_ribbon() to visualise the 50% HDI
df_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping),
alpha = 0.2) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
visual_posteriors(params = group_params,
grouping = c('veh', 'low', 'high')
)
# Let's plot that out in ggplot, using geom_ribbon() to visualise the 50% HDI
df_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping),
alpha = 0.2,
linetype = "null") +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
# Let's plot that out in ggplot, using geom_ribbon() to visualise the 50% HDI
df_group %>%
ggplot(aes(x = session,
y = mean)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping),
alpha = 0.2) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
# Let's plot that out in ggplot, using geom_ribbon() to visualise the 50% HDI
df_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping),
alpha = 0.2) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
# Let's plot that out in ggplot, using geom_ribbon() to visualise the 50% HDI
df_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping,
colour = NA),
alpha = 0.2) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
df_subj %>%
ggplot(aes(x = session,
y = mean,
colour = subjID)) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw()
df_subj
# Let's plot that out in ggplot, using geom_ribbon() to visualise the 50% HDI
df_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping,
colour = NA),
alpha = 0.2) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
df_subj %>%
ggplot(aes(x = session,
y = correct,
colour = subjID)) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw()
df_subj %>%
ggplot(aes(x = session,
y = correct,
colour = subjID)) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
theme(legend.position = 'NONE')
df_subj %>%
ggplot(aes(x = session,
y = correct,
colour = subjID)) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
theme(legend.position = 'NONE') +
# This code plots each subject indidually, panels separated by group
summarise_correct(simulated_rat) %>%
ggplot(aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.5) +
facet_grid(grouping ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme(legend.position = 'none') +
scale_colour_manual(values = palette_by_group(nGroups = nGroups,
nIter = nIter))
df_subj %>%
ggplot(aes(x = session,
y = correct,
colour = subjID)) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
theme(legend.position = 'NONE') +
scale_colour_manual(values = palette_by_group(nGroups = nGroups,
nIter = nIter))
df_subj %>%
ggplot(aes(x = session,
y = correct,
colour = subjID)) +
geom_line(alpha = 0.1) +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
theme(legend.position = 'NONE') +
scale_colour_manual(values = palette_by_group(nGroups = nGroups,
nIter = nIter))
dim(group_params$reinf_sensitivity_by_group_drug)[1]
# Let's create a list of samples ('draws') from the posterior
# - this is to ensure that the the parameters we use for the simulation are
# all from the same iteration
draws <- sample(x = dim(group_params$reinf_sensitivity_by_group_drug)[1],
size = nIter,
replace = FALSE)
draws
# Next, let's take our actual posterior and feed that in to the simulator code.
nIter <- 1000
nGroups <- 3
nTrials <- 2800
# Let's create a list of samples ('draws') from the posterior
# - this is to ensure that the the parameters we use for the simulation are
# all from the same iteration
draws <- sample(x = dim(group_params$reinf_sensitivity_by_group_drug)[1],
size = nIter,
replace = FALSE)
draws
# This will be baked into a function at some point
w <- group_params$reward_rate_by_group_drug[draws, 1:nGroups, 1]
l <- group_params$punish_rate_by_group_drug[draws, 1:nGroups, 1]
b <- group_params$reinf_sensitivity_by_group_drug[draws, 1:nGroups, 1]
k <- group_params$side_stickiness_by_group_drug[draws, 1:nGroups, 1]
t <- group_params$stimulus_stickiness_by_group_drug[draws, 1:nGroups, 1]
u <- group_params$prob_discount_by_group_drug[draws, 1:nGroups, 1]
# Simulate all subjects in parallel - 8.52 seconds elapsed
system.time(
post_pred_check <- simulate_choices_vpvd(nTrials = nTrials,
nGroups = nGroups,
nIter = nIter,
alpha_w = w,
alpha_l = l,
beta = b,
kappa = k,
tau = t,
upsilon = u)
)
# Again, we have a list of two lists
str(post_pred_check)
# Again, this is a huge data frame that needs to be deleted and
# we will do this automatically at some point
object.size(post_pred_check)/1048576
ppc_subj <- summarise_correct_by_subj(post_pred_check)
ppc_group <- summarise_correct_by_group(ppc_subj)
ppc_subj <- summarise_correct_by_subj(post_pred_check)
ppc_group <- summarise_correct_by_group(ppc_subj)
# Same plot as above
ppc_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping,
colour = NA),
alpha = 0.2) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
1:dim(params)[[1]][2])
1:dim(params)[[1]][2]
params
dim(params)
dim(params)
params[[1]]
dim(params[[1]])
dim(params[[1]][2])
params[[1]][2]
# Same plot as above
ppc_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping,
colour = NA),
alpha = 0.2) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
ppc_group
devtools::load_all(".")
ppc_subj <- summarise_correct_by_subj(post_pred_check,
c('veh', 'low', 'high'))
ppc_group <- summarise_correct_by_group(ppc_subj)
ppc_group
ppc_subj
devtools::load_all(".")
ppc_subj <- summarise_correct_by_subj(post_pred_check,
c('veh', 'low', 'high'))
ppc_subj
ppc_group <- summarise_correct_by_group(ppc_subj)
ppc_group
# Same plot as above
ppc_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping,
colour = NA),
alpha = 0.2) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
# Same plot as above
ppc_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping,
colour = NA),
alpha = 0.2) +
geom_line(legend.position = 'NONE') +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
# Same plot as above
ppc_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping,
colour = NA),
alpha = 0.2) +
geom_line(legend.position = 'NONE') +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2') +
scale_alpha(guide = 'none')
# Same plot as above
ppc_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping,
colour = NA),
alpha = 0.2) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2') +
scale_alpha(guide = 'none')
# Same plot as above
ppc_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping,
colour = NA),
alpha = 0.2) +
geom_line(show.legend = FALSE) +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
# Same plot as above
ppc_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping,
colour = NA),
alpha = 0.2,
show.legend = FALSE) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
ppc_subj <- summarise_correct_by_subj(post_pred_check)
ppc_group <- summarise_correct_by_group(ppc_subj)
# Same plot as above
ppc_group %>%
ggplot(aes(x = session,
y = mean,
colour = grouping)) +
geom_ribbon(aes(ymin = q.250,
ymax = q.750,
fill = grouping,
colour = NA),
alpha = 0.2,
show.legend = FALSE) +
geom_line() +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
theme_bw() +
scale_color_brewer(palette = 'Dark2') +
scale_fill_brewer(palette = 'Dark2')
use_vignette('vpvdr', title = 'How to use the vpvdr package')
#install.packages('devtools')
install.packages('tidyverse')
install.packages("tidyverse")
# install.packages('devtools')
# install.packages('tidyverse')
library(rstan)
# install.packages('devtools')
# install.packages('tidyverse')
?vctrs
# install.packages('devtools')
# install.packages('tidyverse')
install.packags('vctrs')
install.packages
# install.packages('devtools')
# install.packages('tidyverse')
install.packages('vctrs')
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
sessionInfo()
library(vctrs)
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
