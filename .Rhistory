test_sum
df <- summarise_sessions_from_list(test_vect)
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.1) +
facet_grid(trial_type ~ grouping) +
ylim(0, 1) +
theme(legend.position = 'none')
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.1) +
#facet_grid(trial_type ~ grouping) +
ylim(0, 1) +
theme(legend.position = 'none')
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.1) +
facet_grid(trial_type ~ .) +
ylim(0, 1) +
theme(legend.position = 'none')
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.1) +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
theme(legend.position = 'none')
devtools::load_all(".")
df <- summarise_sessions_from_list(test_vect)
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.1) +
facet_grid(. ~ trial_type) +
ylim(0, 1) +
theme(legend.position = 'none')
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.1) +
facet_grid(. ~ trial_type) +
geom_hline(yintercept = 0.5) +
ylim(0, 1) +
theme(legend.position = 'none')
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.1) +
facet_grid(. ~ trial_type) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
ylim(0, 1) +
theme(legend.position = 'none')
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.7) +
facet_grid(. ~ trial_type) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
ylim(0, 1) +
theme(legend.position = 'none')
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.7) +
facet_grid(. ~ trial_type) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
ylim(0, 1) +
theme('bw')
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.7) +
facet_grid(. ~ trial_type) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
ylim(0, 1)
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.7) +
facet_grid(. ~ trial_type) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
ylim(0, 1) +
theme(legend.position = 'none')
# Now, simulate VPVD behaviour with a vectorised simulator
# Let's create a test bed
#
nIter <- 1000
nGroups <- 3
nTrials <- 4000
w <- group_params$reward_rate_by_group_drug[1:nIter, 1:nGroups, 1]
l <- group_params$punish_rate_by_group_drug[1:nIter, 1:nGroups, 1]
b <- group_params$reinf_sensitivity_by_group_drug[1:nIter, 1:nGroups, 1]
k <- group_params$side_stickiness_by_group_drug[1:nIter, 1:nGroups, 1]
t <- group_params$stimulus_stickiness_by_group_drug[1:nIter, 1:nGroups, 1]
u <- group_params$prob_discount_by_group_drug[1:nIter, 1:nGroups, 1]
system.time(
test_vect <- simulate_choices_vpvd(nTrials = nTrials,
nGroups = nGroups,
nIter = nIter,
alpha_w = w,
alpha_l = l,
beta = b,
kappa = k,
tau = t,
upsilon = u)
)
###############################################################################
# New list like output
system.time(
df <- summarise_sessions_from_list(test_vect)
)
# long_df <- data.frame(
#                 subjID = vector(mode = 'integer'),
#                 grouping = vector(mode = 'integer'),
#                 trial = vector(mode = 'integer'),
#                 stim_left = vector(mode = 'character'),
#                 stim_right = vector(mode = 'character'),
#                 p_right = vector(mode = 'numeric'),
#                 chose_right = vector(mode = 'logical'),
#                 outcome = vector(mode = 'logical')
#                     )
long_df <- data.frame()
# Now, simulate VPVD behaviour with a vectorised simulator
# Let's create a test bed
#
nIter <- 100
nGroups <- 3
nTrials <- 4000
w <- group_params$reward_rate_by_group_drug[1:nIter, 1:nGroups, 1]
l <- group_params$punish_rate_by_group_drug[1:nIter, 1:nGroups, 1]
b <- group_params$reinf_sensitivity_by_group_drug[1:nIter, 1:nGroups, 1]
k <- group_params$side_stickiness_by_group_drug[1:nIter, 1:nGroups, 1]
t <- group_params$stimulus_stickiness_by_group_drug[1:nIter, 1:nGroups, 1]
u <- group_params$prob_discount_by_group_drug[1:nIter, 1:nGroups, 1]
system.time(
test_vect <- simulate_choices_vpvd(nTrials = nTrials,
nGroups = nGroups,
nIter = nIter,
alpha_w = w,
alpha_l = l,
beta = b,
kappa = k,
tau = t,
upsilon = u)
)
###############################################################################
# New list like output
system.time(
df <- summarise_sessions_from_list(test_vect)
)
devtools::load_all(".")
###############################################################################
# New list like output
system.time(
df <- summarise_sessions_from_list(test_vect)
)
length(list$trial)
nSubj <- length(list$subjID)
nGroups <- length(unique(list$grouping))
nTrials <- length(list$trial)
stim_left <- list$stim_left
stim_right <- list$stim_right
trial_type <- long_df$stim_left + long_df$stim_right
trial_type[trial_type == 50] <- 'neg'
trial_type[trial_type == 100] <- 'vd'
trial_type[trial_type == 150] <- 'pos'
trial_type
trial_type <- stim_left + stim_right
trial_type[trial_type == 50] <- 'neg'
trial_type[trial_type == 100] <- 'vd'
trial_type[trial_type == 150] <- 'pos'
trial_type
devtools::load_all(".")
test_vect
###############################################################################
# New list like output
system.time(
df <- summarise_sessions_from_list(test_vect)
)
devtools::load_all(".")
###############################################################################
# New list like output
system.time(
df <- summarise_sessions_from_list(test_vect)
)
# Now, simulate VPVD behaviour with a vectorised simulator
# Let's create a test bed
#
nIter <- 1000
nGroups <- 3
nTrials <- 4000
w <- group_params$reward_rate_by_group_drug[1:nIter, 1:nGroups, 1]
l <- group_params$punish_rate_by_group_drug[1:nIter, 1:nGroups, 1]
b <- group_params$reinf_sensitivity_by_group_drug[1:nIter, 1:nGroups, 1]
k <- group_params$side_stickiness_by_group_drug[1:nIter, 1:nGroups, 1]
t <- group_params$stimulus_stickiness_by_group_drug[1:nIter, 1:nGroups, 1]
u <- group_params$prob_discount_by_group_drug[1:nIter, 1:nGroups, 1]
system.time(
test_loop <- post_pred_check(nTrials = nTrials,
nIter = N,
alpha_w = w,
alpha_l = l,
beta = b,
kappa = k,
tau = t,
upsilon = u)
)
system.time(
test_vect <- simulate_choices_vpvd(nTrials = nTrials,
nGroups = nGroups,
nIter = nIter,
alpha_w = w,
alpha_l = l,
beta = b,
kappa = k,
tau = t,
upsilon = u)
)
###############################################################################
# New list like output
system.time(
df <- summarise_sessions_from_list(test_vect)
)
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.7) +
facet_grid(. ~ trial_type) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
ylim(0, 1) +
theme(legend.position = 'none')
df
devtools::load_all(".")
###############################################################################
# New list like output - runs in 120 seconds with 3000 subjIDs
system.time(
df <- summarise_sessions_from_list(test_vect)
)
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.7) +
facet_grid(. ~ trial_type) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
ylim(0, 1) +
theme(legend.position = 'none')
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.1) +
facet_grid(. ~ trial_type) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
ylim(0, 1) +
theme(legend.position = 'none')
# I THINK THE GRID PACKAGES ARE NOT NECESSARY
# install.packages('grid')
# install.packages('gridExtra')
# library('grid')
# library('gridExtra')
#
library('tidyverse')
use_r('summarise_correct')
str(test_vect)
list <- test_vect
unique(list$subjID)
devtools::load_all(".")
###############################
# New version of function
system.time(
df <- summarise_correct(test_vect)
)
str(df)
stim_left
devtools::load_all(".")
###############################
# New version of function
system.time(
df <- summarise_correct(test_vect)
)
str(df)
object.size(df)/1048576
devtools::load_all(".")
###############################
# New version of function
system.time(
df <- summarise_correct(test_vect)
)
str(df)
object.size(df)/1048576
###############################
# New version of function
system.time(
df <- summarise_correct(test_vect)
)
str(df)
object.size(df)/1048576
devtools::load_all(".")
###############################
# New version of function
system.time(
df <- summarise_correct(test_vect)
)
str(df)
object.size(df)/1048576
devtools::load_all(".")
###############################
# New version of function
system.time(
df <- summarise_correct(test_vect)
)
str(df)
object.size(df)/1048576
devtools::load_all(".")
###############################
# New version of function
system.time(
df <- summarise_correct(test_vect)
)
###############################
# New version of function
system.time(
df <- summarise_correct(test_vect)
)
devtools::load_all(".")
###############################
# New version of function
system.time(
df <- summarise_correct(test_vect)
)
devtools::load_all(".")
###############################
# New version of function
system.time(
df <- summarise_correct(test_vect)
)
str(df)
str(df)
object.size(df)/1048576
ggplot(data = df,
aes(x = session,
y = mean,
colour = subjID)) +
geom_line(alpha = 0.1) +
facet_grid(. ~ trial_type) +
geom_hline(yintercept = 0.5,
linetype = 'dashed') +
ylim(0, 1) +
theme(legend.position = 'none')
devtools::load_all(".")
###############################
# New version of function - now runs in 13 seconds ...
system.time(
df <- summarise_correct(test_vect)
)
str(df)
object.size(df)/1048576
devtools::load_all(".")
###############################
# New version of function - now runs in 13 seconds ...
system.time(
df <- summarise_correct(test_vect)
)
str(df)
object.size(df)/1048576
dim(group_params$reinf_sensitivity_by_group_drug)
filt_sample <- sample(x = dim(group_params$reinf_sensitivity_by_group_drug)[1],
size = nIter,
replace = FALSE)
filt_sample
w <- group_params$reward_rate_by_group_drug[filt_sample, 1:nGroups, 1]
w
draws <- sample(x = dim(group_params$reinf_sensitivity_by_group_drug)[1],
size = nIter,
replace = FALSE)
dim(group_params[[1]])
dim(subject_params[[1]])
# Visualise the grouped parameters
visual_posteriors(params = group_params,
grouping = c('veh', 'low', 'high')
)
use_package('RColorBrewer')
devtools::load_all(".")
devtools::load_all(".")
# Visualise the grouped parameters
visual_posteriors(params = group_params,
grouping = c('veh', 'low', 'high')
)
devtools::load_all(".")
# Visualise the grouped parameters
visual_posteriors(params = group_params,
grouping = c('veh', 'low', 'high')
)
devtools::load_all(".")
# Visualise the grouped parameters
visual_posteriors(params = group_params,
grouping = c('veh', 'low', 'high')
)
###############################
# New version of function - now runs in 13 seconds ...
system.time(
df <- summarise_correct(test_vect)
)
df$`quantile(...)`
head(df)
devtools::load_all(".")
###############################
# New version of function - now runs in 60 seconds ...
system.time(
df <- summarise_correct(test_vect)
)
head(df)
devtools::load_all(".")
###############################
# New version of function - now runs in 60 seconds ...
system.time(
df <- summarise_correct(test_vect)
)
head(df)
df
#RETURN
df %>%
group_by(session,
trial_type,
subjID,
grouping) %>%
summarise(mean = mean(correct),
q025 = quantile(correct,probs = 0.025)
)
test_vect
###############################
# New version of function - now runs in 60 seconds ...
system.time(
df <- summarise_correct(test_vect)
)
devtools::load_all(".")
###############################
# New version of function - now runs in 60 seconds ...
system.time(
df <- summarise_correct(test_vect)
)
head(df)
use_package('purrr')
p_names <- map_chr(p, ~paste0('q', .x*100))
# Set up quantiles
p <- c(0.025, 0.25, 0.5, 0.75, 0.975)
p_names <- map_chr(p, ~paste0('q', .x*100))
p_funs <- map(p, ~partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
p_funs
head(df)
devtools::load_all(".")
str(test_vect)
head(test_vect)
test_vect$p_right
test_vect$p_right[1]
devtools::load_all(".")
###############################
# New version of function - now runs in 60 seconds ...
system.time(
df <- summarise_correct(test_vect)
)
devtools::load_all(".")
###############################
# New version of function - now runs in 60 seconds ...
system.time(
df <- summarise_correct(test_vect)
)
df
devtools::load_all(".")
###############################
# New version of function - now runs in 60 seconds ...
system.time(
df <- summarise_correct(test_vect)
)
str(df)
object.size(df)/1048576
head(df)
devtools::load_all(".")
gitcreds::gitcres_set()
gitcreds::gitcreds_set()
install.packages('gitcreds')
install.packages("gitcreds")
gitcreds::gitcreds_set()
library(gitcreds)
gitcreds::gitcreds_set()
library(gitcreds)
gitcreds::gitcreds_set()
